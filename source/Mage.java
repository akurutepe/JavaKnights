
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.util.ArrayList;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : HW546 - Knight Offline
//  @ File Name : Mage.java
//  @ Date : 4/7/2015
//  @ Author : Alican Kurutepe - 1902618
//
//




public class Mage extends BasicKnight{
    private final int initSpeed = 75;
    private final int initHitPoint = 400;

   
       
    Mage (Color teamColor, int newPosX, int newPosY){
        
        this.setSpeed(initSpeed);
        this.setHitPoint(initHitPoint);
        this.setPosX(newPosX);
        this.setPosY(newPosY);
        this.setScore(0);
        this.setScoreTotal(0);
        this.setStrategy(null);
        this.setTarget(null);
        this.setKnightColor(teamColor);
    }
    @Override
    public void attackNormal(){
        if((Math.abs(this.getPosX()-this.getTarget().getPosX()) <= 37) && (Math.abs(this.getPosY()-this.getTarget().getPosY()) <= 37))
        {
           
            if(this.getTarget().getHitPoint() > 0)
            {
                 this.setNormalAttackDone(true);
                if(this.getTarget().getHitPoint()<100){
                    this.setDmg(this.getDmg()+this.getTarget().getHitPoint());
                    this.getTarget().setHitPoint((this.getTarget().getHitPoint()-100));
                }
                else{
                    this.setDmg(this.getDmg()+100);
                    this.getTarget().setHitPoint((this.getTarget().getHitPoint()-100));
                }
                    
                
            }
            
             if(this.getTarget().getHitPoint() <= 0)
            {
                this.setScore(this.getScore()+75);
                this.setScoreTotal(this.getScoreTotal()+75);
                this.setKills(this.getKills()+1);
            }
             
        }
        
    }
    @Override
    public void attackSpecial(){
        
        ArrayList<Knight> enemyKnights;
        if(this.getKnightColor() == Color.RED)
        {
            enemyKnights = Simulation.getBlueTeam().getKnights();
        }
        else
        {
            enemyKnights = Simulation.getRedTeam().getKnights();
        }
        
        for(int i =0;i<enemyKnights.size();i++)
        {
            if((Math.abs(this.getPosX()-enemyKnights.get(i).getPosX()) <= 50) && (Math.abs(this.getPosY()-enemyKnights.get(i).getPosY()) <= 50))
            {
                this.setSpecialAttackDone(true);
                if(enemyKnights.get(i).getHitPoint() > 0)
                {

                    if(enemyKnights.get(i).getHitPoint()<75){
                        this.setDmg(this.getDmg()+enemyKnights.get(i).getHitPoint());
                        enemyKnights.get(i).setHitPoint((enemyKnights.get(i).getHitPoint()-75));
                    }
                    else{
                        this.setDmg(this.getDmg()+75);
                        enemyKnights.get(i).setHitPoint((enemyKnights.get(i).getHitPoint()-75));
                    }


                }

                 if(enemyKnights.get(i).getHitPoint() <= 0)
                {
                    this.setScore(this.getScore()+75);
                    this.setScoreTotal(this.getScoreTotal()+75);
                    this.setKills(this.getKills()+1);
                }

            }
            
        }
        
    }
    @Override
    public void draw(Graphics g, Color newColor) {
        int[] x = new int[4];
        int[] y = new int[4];
        int n;
        
        Graphics2D g2d = (Graphics2D) g;
		
	g2d.setRenderingHint (RenderingHints.KEY_ANTIALIASING,   RenderingHints.VALUE_ANTIALIAS_ON);
		
	g2d.setPaint(newColor);
		
	x[0]=this.getPosX()+15; x[1]=this.getPosX()    ; x[2]=this.getPosX()+15; x[3]=this.getPosX()+30;
        y[0]=this.getPosY()   ; y[1]=this.getPosY()+15 ; y[2]=this.getPosY()+30; y[3]=this.getPosY()+15;
        n = 4;

        Polygon p = new Polygon(x, y, n);  

        g.fillPolygon(p);     

		
	g2d.setPaint(Color.YELLOW);
        g2d.drawString(String.valueOf(this.getHitPoint()), this.getPosX()+4, this.getPosY()+18);
        if(this.isSpecialAttackDone())
        {
            g2d.setPaint(Color.CYAN);
            this.setSpecialAttackDone(false);
            g2d.fillOval(this.getPosX()-35,this.getPosY()-35,100,100);
           
            
        }
        if(this.isNormalAttackDone())
        {
            if(this.getTarget() != null)
            {    
                if((Math.abs(this.getPosX()-this.getTarget().getPosX()) <= 37) && (Math.abs(this.getPosY()-this.getTarget().getPosY()) <= 37))
                 {   
                    g2d.setPaint(Color.CYAN);

                    g2d.drawLine(this.getPosX()+6,this.getPosY()+10,this.getTarget().getPosX()+6, this.getTarget().getPosY()+10);
                    g2d.drawLine(this.getPosX()+8,this.getPosY()+10,this.getTarget().getPosX()+12, this.getTarget().getPosY()+10);
                    g2d.drawLine(this.getPosX()+10,this.getPosY()+10,this.getTarget().getPosX()+18, this.getTarget().getPosY()+10);
                    g2d.drawLine(this.getPosX()+12,this.getPosY()+10,this.getTarget().getPosX()+24, this.getTarget().getPosY()+10);
                    g2d.drawLine(this.getPosX()+14,this.getPosY()+10,this.getTarget().getPosX()+30, this.getTarget().getPosY()+10);
                    g2d.drawLine(this.getPosX()+10,this.getPosY()+6,this.getTarget().getPosX()+10, this.getTarget().getPosY()+6);
                    g2d.drawLine(this.getPosX()+10,this.getPosY()+8,this.getTarget().getPosX()+10, this.getTarget().getPosY()+8);
                    g2d.drawLine(this.getPosX()+10,this.getPosY()+12,this.getTarget().getPosX()+10, this.getTarget().getPosY()+12);
                    g2d.drawLine(this.getPosX()+10,this.getPosY()+14,this.getTarget().getPosX()+10, this.getTarget().getPosY()+14);
                    this.setNormalAttackDone(false);
                }
            }
        }
    }
}

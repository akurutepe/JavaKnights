
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : HW546 - Knight Offline
//  @ File Name : Priest.java
//  @ Date : 4/7/2015
//  @ Author : Alican Kurutepe - 1902618
//
//

    public class Priest extends BasicKnight{
    private final int initSpeed = 50;
    private final int initHitPoint = 350;


    Priest (Color teamColor, int newPosX, int newPosY){
        
        this.setSpeed(initSpeed);
        this.setHitPoint(initHitPoint);
        this.setPosX(newPosX);
        this.setPosY(newPosY);
        this.setScore(0);
        this.setScoreTotal(0);
        this.setStrategy(null);
        this.setTarget(null);
        this.setKnightColor(teamColor);
    }
    @Override
    public void attackNormal(){
        if((Math.abs(this.getPosX()-this.getTarget().getPosX()) <= 10) && (Math.abs(this.getPosY()-this.getTarget().getPosY()) <= 10))
        {
            if(this.getTarget().getHitPoint() > 0)
            {
                
                if(this.getTarget().getHitPoint()<150){
                    this.setDmg(this.getDmg()+this.getTarget().getHitPoint());
                    this.getTarget().setHitPoint((this.getTarget().getHitPoint()-150));
                }
                else{
                    this.setDmg(this.getDmg()+150);
                    this.getTarget().setHitPoint((this.getTarget().getHitPoint()-150));
                }
                    
                
            }
            if(this.getTarget().getHitPoint() <= 0)
            {
                this.setScore(this.getScore()+75);
                this.setScoreTotal(this.getScoreTotal()+75);
                this.setKills(this.getKills()+1);
            }
        }
    }
    @Override
    public void attackSpecial(){
        
        ArrayList<Knight> friendKnights;
        if(this.getKnightColor() == Color.RED)
        {
            friendKnights = Simulation.getRedTeam().getKnights();
        }
        else
        {
            friendKnights = Simulation.getBlueTeam().getKnights();
        }
        this.setHitPoint(this.getHitPoint()+75);
        if(this.getHitPoint() >= 350)
        {
            this.setHitPoint(350);
        }
        
        for(int i =0;i<friendKnights.size();i++)
        {
            if((Math.abs(this.getPosX()-friendKnights.get(i).getPosX()) <= 50) && (Math.abs(this.getPosY()-friendKnights.get(i).getPosY()) <= 50))
            {
                this.setSpecialAttackDone(true);
                friendKnights.get(i).setHitPoint(friendKnights.get(i).getHitPoint() + 75);
                if(friendKnights.get(i) instanceof Rogue)
                {
                    if(friendKnights.get(i).getHitPoint() >= 500)
                    {
                        friendKnights.get(i).setHitPoint(500);
                    }
   
                }
                else if(friendKnights.get(i) instanceof Mage)
                {
                    if(friendKnights.get(i).getHitPoint() >= 400)
                    {
                        friendKnights.get(i).setHitPoint(400);
                    }
   
                }
                else{
                    if(friendKnights.get(i).getHitPoint() >= 350)
                    {
                        friendKnights.get(i).setHitPoint(350);
                    }
                    
                }
               

            }
            
        }
        
    }
   
    @Override
    public void draw(Graphics g, Color newColor) {
        Graphics2D g2d = (Graphics2D) g;
		
	g2d.setRenderingHint (RenderingHints.KEY_ANTIALIASING,   RenderingHints.VALUE_ANTIALIAS_ON);
		
	g2d.setPaint(newColor);
		
	g2d.fillRect((int) this.getPosX(), (int) this.getPosY(), 30, 30);

		
	g2d.setPaint(Color.YELLOW);
        g2d.drawString(String.valueOf(this.getHitPoint()), this.getPosX()+4, this.getPosY()+18);
        
        if(this.isSpecialAttackDone())
        {
            g2d.setPaint(Color.GREEN);
            this.setSpecialAttackDone(false);
            g2d.fillOval(this.getPosX()-30,this.getPosY()-30,100,100);
           
            
        }
    }
    
}

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : HW546 - Knight Offline
//  @ File Name : Team.java
//  @ Date : 4/7/2015
//  @ Author : Alican Kurutepe - 1902618
//
//

import java.awt.Color;
import java.util.*;

public class Team {
        
        private int teamScore;
        private int teamKills;
        private int totalDmg;
        private Color teamColor;
        private int basePosX;
        private int basePosY;
        private ArrayList<Knight> knights = new ArrayList<>();
        private ArrayList<SoldierFactory> factories = new ArrayList<>();
        private Random randomKnightGen = new Random();
        private int randomKnightKey;
        private ArrayList<Grade1Decorator> grade1DecoratorList = new ArrayList<>();
        private ArrayList<Grade2Decorator> grade2DecoratorList = new ArrayList<>();
        private ArrayList<Grade3Decorator> grade3DecoratorList = new ArrayList<>();
        
        
        Team(Color newColor, int newPosX, int newPosY)
        {
            int priestBaseX;
            int mageBaseX;
            int rogueBaseX;
            
            this.basePosY = newPosY;
            this.basePosX = newPosX;
            this.teamColor = newColor;
            
            rogueBaseX= basePosX;
            mageBaseX= basePosX + 50;
            priestBaseX = basePosX  + 100;
         
            System.out.println("a team instantiated");
            
            PriestFactory priestFactory = new PriestFactory(teamColor,priestBaseX,basePosY);
            MageFactory mageFactory = new MageFactory(teamColor,mageBaseX,basePosY);
            RogueFactory rogueFactory = new RogueFactory(teamColor,rogueBaseX,basePosY);
            
            this.factories.add(priestFactory);
            this.factories.add(mageFactory);
            this.factories.add(rogueFactory);
            
            this.knights.add(priestFactory.CreateKnight());
            this.knights.add(priestFactory.CreateKnight());
            this.knights.add(mageFactory.CreateKnight());
            this.knights.add(mageFactory.CreateKnight());
            this.knights.add(mageFactory.CreateKnight());
            this.knights.add(rogueFactory.CreateKnight());
            this.knights.add(rogueFactory.CreateKnight());
            this.knights.add(rogueFactory.CreateKnight());
            
            for(int i = 0; i < this.knights.size();i++)
            {
                    this.grade3DecoratorList.add(new Grade3Decorator(this.getKnights().get(i)));
                    this.grade2DecoratorList.add(new Grade2Decorator(this.getKnights().get(i)));
                    this.grade1DecoratorList.add(new Grade1Decorator(this.getKnights().get(i)));

            }
            
            
        }
        public int getTeamScore(){
            return this.teamScore;
        }
        public Color getTeamColor(){
            return this.teamColor;
        }
        public ArrayList<Knight> getKnights()
        {
            return this.knights;
        }
        public void refresh()
        {
           
           
            this.randomKnightKey = this.randomKnightGen.nextInt(3);
                    
            for(int i = 0; i< this.knights.size();i++)
            {
                if(this.knights.get(i).isDead())
                {
                  
                  
                  this.grade1DecoratorList.remove(i);
                  this.grade2DecoratorList.remove(i);
                  this.grade3DecoratorList.remove(i);
                  this.knights.remove(i);
                  
                  this.knights.add(this.factories.get(i%3).CreateKnight());
                  this.grade1DecoratorList.add(new Grade1Decorator(this.knights.get(this.knights.size()-1)));
                  this.grade2DecoratorList.add(new Grade2Decorator(this.knights.get(this.knights.size()-1)));
                  this.grade3DecoratorList.add(new Grade3Decorator(this.knights.get(this.knights.size()-1)));
        
                }
                this.teamScore += this.knights.get(i).getScore();
                this.teamKills += this.knights.get(i).getKills();
                this.totalDmg += this.knights.get(i).getDmg();
                
                this.knights.get(i).setDmg(0);
                this.knights.get(i).setKills(0);
                this.knights.get(i).setScore(0);
                
                
             
            }
            
            
        }

    public int getTeamKills() {
        return this.teamKills;
    }

    public void setTeamKills(int teamKills) {
        this.teamKills = teamKills;
    }

    public int getTotalDmg() {
        return totalDmg;
    }

    public void setTotalDmg(int totalDmg) {
        this.totalDmg = totalDmg;
    }

    public int getBasePosX() {
        return this.basePosX;
    }

    public void setBasePosX(int basePosX) {
        this.basePosX = basePosX;
    }

    public int getBasePosY() {
        return this.basePosY;
    }

    public void setBasePosY(int basePosY) {
        this.basePosY = basePosY;
    }

    public ArrayList<SoldierFactory> getFactories() {
        return this.factories;
    }

    public void setFactories(ArrayList<SoldierFactory> factories) {
        this.factories = factories;
    }

    public ArrayList<Grade1Decorator> getGrade1DecoratorList() {
        return grade1DecoratorList;
    }

    public void setGrade1DecoratorList(ArrayList<Grade1Decorator> grade1DecoratorList) {
        this.grade1DecoratorList = grade1DecoratorList;
    }

    public ArrayList<Grade2Decorator> getGrade2DecoratorList() {
        return grade2DecoratorList;
    }

    public void setGrade2DecoratorList(ArrayList<Grade2Decorator> grade2DecoratorList) {
        this.grade2DecoratorList = grade2DecoratorList;
    }

    public ArrayList<Grade3Decorator> getGrade3DecoratorList() {
        return grade3DecoratorList;
    }

    public void setGrade3DecoratorList(ArrayList<Grade3Decorator> grade3DecoratorList) {
        this.grade3DecoratorList = grade3DecoratorList;
    }
        
        
}
